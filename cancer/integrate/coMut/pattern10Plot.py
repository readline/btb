#!/usr/bin/env python
# pattern10Plot.py
# Kai Yu
# github.com/readline
# 150413
################################################
# Use 2 reference T, C base patterns generated by pattern10baseRef.py 
# and 6 T, C mutant base patterns generated by pattern10baseByFlank10.py
# to plot a subsitution pattern plot.
# ./pattern10Plot.py [output prefix] [8 required files. Orders doesn't matter]

from __future__ import division
import os,sys,math
import matplotlib
matplotlib.use('Agg')
import os,sys,matplotlib,pylab
import matplotlib.pyplot as plt
import numpy as np

def importMat(matpath):
    infile = open(matpath,'r')
    mat = []
    while 1:
        line = infile.readline()
        if not line: break
        c = line.rstrip().split('\t')
        mat.append([float(n) for n in c[1:]])
    return mat

def font(size):
    return matplotlib.font_manager.FontProperties(size=size,\
        fname='/Share/BP/yukai/src/font/ARIAL.TTF')

def main():
    try:
        prefix = sys.argv[1]
        matpathlist = sys.argv[2:10]
    except:
        print sys.argv[0] + ' [output prefix] [mat path 1] ... [mat path 8]'
        sys.exit()

    ###### Prepare data ######
    data, title, ytitle = {},{},{}
    for n in range(len(matpathlist)):
        tail = matpathlist[n].split('.')[-1]
        if tail == 'T10':
            data[0]  = importMat(matpathlist[n])
            title[0] = 'T bases'
            ytitle[0]= 'Proportion of bases'
        elif tail == 'C10':
            data[1] = importMat(matpathlist[n])
            title[1] = 'C bases'
            ytitle[1]= 'Proportion of bases'
        elif tail == 'TG10':
            data[2] = importMat(matpathlist[n])
            title[2] = 'T > G'
            ytitle[2]= 'Number of mutations'
        elif tail == 'TC10':
            data[4] = importMat(matpathlist[n])
            title[4] = 'T > C'
            ytitle[4]= 'Number of mutations'
        elif tail == 'TA10':
            data[6] = importMat(matpathlist[n])
            title[6] = 'T > A'
            ytitle[6]= 'Number of mutations'
        elif tail == 'CT10':
            data[3] = importMat(matpathlist[n])
            title[3] = 'C > T'
            ytitle[3]= 'Number of mutations'
        elif tail == 'CG10':
            data[5] = importMat(matpathlist[n])
            title[5] = 'C > G'
            ytitle[5]= 'Number of mutations'
        elif tail == 'CA10':
            data[7] = importMat(matpathlist[n])
            title[7] = 'C > A'
            ytitle[7]= 'Number of mutations'
    # colorlist = ['#fb8897','#efd96a','#bcc1c4','#1fb0cb']
    # colorlist=['#FF7268','#FFD353','#FFFD91','#A5ED53']
    # colorlist = ['#FFCCCC','#CCFF99','#CCCCFF','#FFFF99']
    colorlist = ['#f08080','#9acd32','#ffd700','#87cefa']

    ###### Plot ######
    fig = plt.figure(figsize = (21,26))
    ax = {}
    ax[0] = fig.add_axes([0.09,0.77,0.35,0.18])
    ax[1] = fig.add_axes([0.56,0.77,0.35,0.18])
    ax[2] = fig.add_axes([0.09,0.54,0.35,0.18])
    ax[3] = fig.add_axes([0.56,0.54,0.35,0.18])
    ax[4] = fig.add_axes([0.09,0.31,0.35,0.18])
    ax[5] = fig.add_axes([0.56,0.31,0.35,0.18])
    ax[6] = fig.add_axes([0.09,0.08,0.35,0.18])
    ax[7] = fig.add_axes([0.56,0.08,0.35,0.18])

    for n in range(8):
        # print n
        # print len(data[n][3]),len(data[n][2]),len(data[n][1]),len(data[n][0])
        ax[n].bar(range(21), data[n][3],width=1,alpha=0.8,align='center',color=colorlist[3])
        ax[n].bar(range(21), data[n][2],width=1,alpha=0.8,align='center',color=colorlist[2],bottom=data[n][3])
        ax[n].bar(range(21), data[n][1],width=1,alpha=0.8,align='center',color=colorlist[1],bottom=[x+y for x,y in zip(data[n][3],data[n][2])])
        ax[n].bar(range(21), data[n][0],width=1,alpha=0.8,align='center',color=colorlist[0],bottom=[x+y+z for x,y,z in zip(data[n][3],data[n][2],data[n][1])])
        ymax = data[n][3][0] + data[n][2][0] + data[n][1][0] + data[n][0][0]
        ax[n].set_ylim(0,ymax)
        ax[n].set_xlim(-0.5,20.5)
        ax[n].set_title(title[n], fontproperties=font(24))
        ax[n].set_ylabel(ytitle[n], fontproperties=font(20))
        ax[n].set_xticks(range(0,21))
        ax[n].set_xticklabels(range(-10,11),fontproperties=font(18))
        ax[n+10] = ax[n].twinx()
        ax[n+10].set_ylim(0,ymax)
        ax[n+10].set_xlim(-0.5,20.5)
        ax[n+10].set_yticks([ymax/8*1,ymax/8*3,ymax/8*5,ymax/8*7])
        ax[n+10].set_yticklabels(['A','C','G','T'],fontproperties=font(18))
        plt.setp(ax[n].get_xticklines(), visible=False)
        # plt.setp(ax[n].get_yticklines(), visible=False)
        plt.setp(ax[n+10].get_xticklines(), visible=False)
        plt.setp(ax[n+10].get_yticklines(), visible=False)
        if n > 1:
            ax[n].set_yticks(range(0,int(ymax),int(ymax//5)//100 *100))
            ax[n].set_yticklabels(range(0,int(ymax),int(ymax//5)//100 *100),fontproperties=font(18))
        else:
            ax[n].set_yticks([x/10 for x in range(0,11,2)])
            ax[n].set_yticklabels([x/10 for x in range(0,11,2)],fontproperties=font(18))

    # for n in range(8):
    #     ax[n].bar(range(21), data[n][0],width=1, color=colorlist)
    #     ax[n].bar(range(21), data[n][1],width=1, color=colorlist,bottom=data[n][0])
    #     ax[n].bar(range(21), data[n][2],width=1, color=colorlist,bottom=data[n][1])
    #     ax[n].bar(range(21), data[n][3],width=1, color=colorlist,bottom=data[n][2])

    fig.savefig(prefix+'.png')

if __name__ == '__main__':
    main()
